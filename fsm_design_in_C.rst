State Machine Design in C
=========================
(https://www.codeproject.com/Articles/1275479/State-Machine-Design-in-C)

*features:*

- C lang
- Compact
- Objects - support multiple instantiations of a single state machine type
- Transition tables - transition tables precisely control state transition behavior
- Events - every event is a simple function with any argument types
- State action - every state action is a separate function with a single, unique event data argument if desire
- Guard/entry/exit actions - optionally a state machine can use guard conditions and separate entry/exit
    action functions for each state
- Macros
- Error checking
- Thread-safe

Background
''''''''''

> Switch-Case Construction

..code ::

    switch (currentState) {
        case ST_IDLE:
           // do something in the idle state
           break;

        case ST_STOP:
            // do something in the stop state
            break;
        ...
    }


> Problems with *Switch-Case*:

    - Bad design for multithreaded project:
    - Problem with controlling what state transitions are valid and which ones are invalid.
    - Problem when trying to send data to a specific state.



Why use a state machine?
========================

Example: motor control 

> The motor control events:
1. SetSpeed - sets the motor at a specific speed
2. Halt - stops the motor

> Motor states:
1. Idle - the motor is not spinning but is at rest
    o Do nothing

2. Start - starts the motor from a dead stop
    o Turn on motor power
    o Set motor speed

3. Change Speed - adjust the speed of an already moving motor
    o Change motor speed

4. Stop - stop a moving motor
    o Turn off motor power
    o Go to the Idle state

> Current state - is the state the state machine currently occupies. 
> Every instance of a particular state machine instance can set the initial state when defined. The initial
    state, however, does not execute during object creation. Only an event sent to the state machine causes
    a state function to execute.

..code ::

                   [ ]
                    |
                    |
                    V
          +---->[  Idle  ]----+
         /                     \SetSpeed
        /                       \
       +          Halt           V
    [ Stop ]<----------------[ Start ]
       ^                         /
        \Halt                   /SetSpeed  
         \                     /  
          +---[ChangeSpeed]<--+
                ^       |
                |       |
                |       V
                 SetSpeed

        Fig 1. Motor state diagram

> Using a state machine captures and enforces complex interactions, which might otherwise be difficult to
    convey and implement.

Internal and External Events
''''''''''''''''''''''''''''

> Event is the stimulus that causes a state machine to transation between states.

> External event 
    - is a function call into a state-machine module
    - these functions are public and are called from the outside of from code external to the state-machine 
        module. Any thread or task whithin a system can generate an external event. 
    - if the external event function call causes a state transition to occur, the state will execute 
        synchronously within the caller's thread of control.

> Internal event:
    - self-generated by the state machine itself during state execution

> The external event and all internall events, if any, execute within the caller's thread of control

> Once the external event starts the state machine executing, it cannot be interrupted by another external
    event until the external event and all internal events have completed execution if locks are used. This 
    run to completion model provides a multithread-safe environment for the state transitions. Semaphores or
    mutexes can be used in the state machine engine to block other threads (see _SM_ExternalEvent())

Event Data
''''''''''

> When an event is generated, it can optionally attach event data to be used by the state function during
    execution. Event data - single const on non-const pointer to any built-in or user-defined data type.

> Once the state has completed execution, the event data is considered used up and must be deleted.

> Create event data: *SM_XAlloc()*, delete event data: *SM_XFree()*

State Transitions
'''''''''''''''''








